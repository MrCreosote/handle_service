#BEGIN_HEADER
use LWP::UserAgent;
use SystemProperties;
use HTTP::Headers;
use HTTP::Request::Common;
use JSON -support_by_pp;
use Data::Dumper;
#END_HEADER



#BEGIN <method name>
my ($uri, $header, $form_ref, $request, $response);

# create the uri
$uri = "";

# create the header
$header = HTTP::Headers->new();	
$header->header('Host' => $uri);
$header->authorization_basic($n, $p);
# add additional headers such as Content-Type

# create the request
if ($method eq 'POST') {
   if (defined $form_ref and @$form_ref > 0) {
      $request = HTTP::Request->new( POST $uri, $form_ref, $header);
   }
   else {
     $request = HTTP::Request->new( POST $uri, $header );
   }
}
elsif ($method eq 'PUT') {
   $form_ref = [[$filename]];
   $header->header(Content-Type => 'multipart/form-data');
   $header->header(Content => $form_ref);
   $request = HTTP::Request->new( PUT $uri, $header );
}
elsif ($method eq 'GET') {

}
else {
     die "method: $method is undefined or not recognized";
}

# send the request
$response = $self->{ua}->request($request);
# print Dumper($response);

# parse the response
if ($response->is_success) {
      my $json = JSON->new()->allow_nonref();
      $u = $json->decode($response->decoded_content);
}
else {
      my ($package, $filename, $line) = caller;
      $u = "request failed at $package in $filename at $line " 
	. "with response status " . $response->status;		
}

# perform any additional restructuring of $u


#END <method name>