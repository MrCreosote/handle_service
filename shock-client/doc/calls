module adm {

typedef string identifier;

typedef structure {
	string md5;
	string sha1;
} fingerprint;

typedef structure {
	fingerprint checksum
	string name;
	integer size;
} file;

typedef string filename;
typedef integer filesize;

typedef structure {
	fingerprint checksum;
	filename name;
	filesize sise;
};

# start here with attributes;
	
	
	





/*
GET /

Description of resources available through this api
example

curl -X GET http://<host>[:<port>]/

returns

{"resources":["node", "user"],"url":"http://localhost:8000/","documentation":"http://localhost/","contact":"admin@host.com","id":"Shock","type":"Shock"}
*/

funcdef description() returns(string);

/*
POST /node

Create node

    optionally takes user/password via Basic Auth. If set only that user with have access to the node
    accepts multipart/form-data encoded
    to set attributes include file field named "attributes" containing a json file of attributes
    to set file include file field named "file" containing any file

example

curl -X POST [ --user user:password ] [ -F "attributes=@<path_to_json>" -F "file=@<path_to_data_file>" ] http://<host>[:<port>]/node

returns

{
    "D": {<node>},
    "E": <error message or null>, 
    "S": <http status of response (also set in headers)>
} 
*/



GET /node

List nodes

    optionally takes user/password via Basic Auth. Grants access to non-public data
    by adding ?skip=N you get the nodes starting at N+1
    by adding ?limit=N you get a maximum of N nodes returned

querying

All attributes are queriable. For example if a node has in it's attributes "about" : "metagenome" the url

/node/?query&about=metagenome

would return it and all other nodes with that attribute. Address of nested attributes like "metadata": { "env_biome": "ENVO:human-associated habitat", ... } is done via a dot notation

/node/?query&metadata.env_biome=ENVO:human-associated%20habitat

Multiple attributes can be selected in a single query and are treated as AND operations

/node/?query&metadata.env_biome=ENVO:human-associated%20habitat&about=metagenome

Note: all special characters like a space must be url encoded.
example

curl -X GET [ --user user:password ] http://<host>[:<port>]/node/[?skip=<skip>&limit=<count>][&query&<tag>=<value>]

returns

{
    "D": {[<array of nodes>]},
    "E": <error message or null>, 
    "S": <http status of request>
}


GET /node/{id}

View node, download file (full or partial)

    optionally takes user/password via Basic Auth
    ?download - complete file download
    ?download&index=size&part=1[&part=2...][chunksize=inbytes] - download portion of the file via the size virtual index. Chunksize defaults to 1MB (1048576 bytes).

example

curl -X GET [ --user user:password ] http://<host>[:<port>]/node/{id}

returns

{
    "D": {<node>},
    "E": <error message or null>, 
    "S": <http status of request>
}


PUT /node/{id}

Modify node, create index

    optionally takes user/password via Basic Auth

Modify:

    Once the file or attributes of a node are set they are immutiable.
    accepts multipart/form-data encoded
    to set attributes include file field named "attributes" containing a json file of attributes
    to set file include file field named "file" containing any file

example

curl -X PUT [ --user user:password ] [ -F "attributes=@<path_to_json>" -F "file=@<path_to_data_file>" ] http://<host>[:<port>]/node/{id}

returns

{
    "D": {<node>},
    "E": <error message or null>, 
    "S": <http status of request>
}


Create index:

    currently available index types: size, record (for sequence file types)

example

curl -X PUT [ --user user:password ] http://<host>[:<port>]/node/{id}?index=<type>

returns

{
    "D": null,
    "E": <error message or null>, 
    "S": <http status of request>
}


POST /user

Create user

Requires Basic Auth encoded username:password. To create an admin user include :secret_key specified at server start.
example

# regular user 
curl -X POST --user joeuser:1234 http://<host>[:<port>]/user

# admin user
curl -X POST --user joeuser:1234:supersupersecret http://<host>[:<port>]/user

returns

{
    "D": {<user>},
    "E": <error message or null>, 
    "S": <http status of request>
}


GET /user/{id}

View user

Requires Basic Auth encoded username:password. Regular user are able to see their own information while Admin user are able to access all.
example

curl -X GET --user joeuser:1234 http://<host>[:<port>]/user/{id}

returns

{
    "D": {<user>},
    "E": <error message or null>, 
    "S": <http status of request>
}


GET /user

List users

Requires Basic Auth encoded username:password. Restricted to Admin users.
example

curl -X GET --user joeadmin:12345 http://<host>[:<port>]/user

returns

{
    "D": {[<user>,...]},
    "E": <error message or null>, 
    "S": <http status of request>
}



