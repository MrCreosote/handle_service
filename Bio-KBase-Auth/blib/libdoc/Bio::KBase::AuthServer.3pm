.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::KBase::AuthServer 3"
.TH Bio::KBase::AuthServer 3 "2012-07-09" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Bio::KBase::AuthServer"
.IX Header "Bio::KBase::AuthServer"
Server side \s-1API\s0 for protecting a KBase resource.
.SS "Examples"
.IX Subsection "Examples"
.Vb 4
\&    my $d = new HTTP::Daemon;
\&    my $res = new HTTP::Response;
\&    my $msg = new HTTP::Message;
\&    my $as = new Bio::KBase::AuthServer;
\&
\&    while (my $c = $d\->accept()) {
\&        while (my $r = $c\->get_request) {
\&            printf "Server: Recieved a connection: %s %s\en\et%s\en", $r\->method, $r\->url\->path, $r\->content;
\&
\&            my $body = sprintf("You sent a %s for %s.\en\en",$r\->method(), $r\->url\->path);
\&            $as\->validate_request( $r);
\&            if ($as\->valid) {
\&                $body .= sprintf( "Successfully logged in as user %s\en",
\&                                  $as\->user\->user_id);
\&            } else {
\&                $body .= sprintf("You failed to login: %s.\en", $as\->error_message);
\&            }
\&            $res\->content( $body);
\&            $c\->send_response($res);
\&        }
\&        $c\->close;
\&        undef($c);
\&    }
.Ve
.SS "Instance Variables"
.IX Subsection "Instance Variables"
.IP "\fBuser\fR (Bio::KBase::AuthUser)" 4
.IX Item "user (Bio::KBase::AuthUser)"
Contains current user provided by client
.IP "\fBvalid\fR (boolean)" 4
.IX Item "valid (boolean)"
Did the usera\*^XXs credentials validate?
.IP "\fBauth_protocol\fR (string)" 4
.IX Item "auth_protocol (string)"
Protocol used for authentication (oauth1,oauth2,user/password, etc...)
.IP "\fBerror_message\fR (string)" 4
.IX Item "error_message (string)"
Any errors generated during validation
.SS "Methods"
.IX Subsection "Methods"
.IP "\fBnew([request_object])\fR" 4
.IX Item "new([request_object])"
returns Bio::KBase::AuthServer
.Sp
.Vb 1
\&   Object constructor. Optionally takes an HTTP request object that will be handed to validate_request() for authentication information. If the request object has legitimate auth information the User and user_id attributes  will be populated, if not then the userid attribute will be null/undef.
.Ve
.IP "\fBvalidate_request( request_object)\fR" 4
.IX Item "validate_request( request_object)"
returns boolean
.Sp
.Vb 6
\&    Performs the real work of validating a request.
\&Examines the HTTP request headers for credentials
\&and then validate the credentials using OAuth crypto protocols.
\&Query the user database/registry for user profile information.
\&Populate the user attribute with user profile information
\&   Returns true if the request is properly authenticated and fills in the authenticated user
.Ve
.IP "\fBvalidate_auth_token( string \s-1URL\s0, string auth_header)\fR" 4
.IX Item "validate_auth_token( string URL, string auth_header)"
returns boolean
.Sp
.Vb 5
\&    Performs validation of the authentication token (string containing OAuth attributes)
\&Validate the credentials, making sure that the URL embedded in the authentication tokeno matches the URL passed into the function
\&Query the user database/registry for user profile information.
\&Populate the user attributes with user profile information
\&   Returns true if the header string properly authenticates and fills in the authenticated user
.Ve
