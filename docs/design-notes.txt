ok, what is going on. here is what we know.

1) a client wants to upload data
2) we want that data to go to a shock server near the service it is going to be used by.
3) this implies that the upload method is called on the service object.
4) the data store service should hand out the url of the service to upload to.

OK, so the general flow of things goes like this.

A user instanciates a data store client object. Next, the user requests a handle. This is done by calling new_handle.

	$h = $ds->new_handle();

At this point, the handle is empty. Now the user has a choice. The user can simply initialize the handle. Initializing the handle at this point will result in the a an empty node being created on the default shock server. The handle would contain a node id from the default shock server, and the handle would contain the url of the default shock server.

	$h = $ds->initialize_handle($h);

Alternatively, the user can call the localize method, passing in the name of a service. This results in an attempt to find a shock server near the service. If a shock service near the service can not be found, the default shock server is used. 

	$h = $ds->localize_handle($service_name, $h);
	$h = $ds->initialize_handle($h);

	# $h = $ds->initialize_handle($ds->localize($service_name, $h));

AUTHENTICATION

The primary question becomes is authentication required. Let's just assume
for the moment it is. If we solve this, then allowing unauthenticated traffic
is easy.

The client method get_handle is declared as authention required.
Presumably the get_handle in the AbstractHandleImpl will do the right
thing. When the constructor is called, it will look in the environment for
the token, otherwise fail.

For the upload_metadata and download_metadata methods. 
Not sure if these should be abstract or concrete. If concete
then we don't have to hand roll an implemetation for the four
different supported languages. The cost is an extra network
hop. For now, I choose the extra network hop over implementing
the same method by hand in for different languages.
A

LOCALIZING

Localizing is the act of assigning a url to the handle. Generally,
you would expect the default production shock server to always
be the url. However, through the use of a registry, a shock server
can be associated with a service. The standard for this is to use
the fully qualified class name of the client as the key to which
a shock server url is associated.


The current implementation allows for localizizing to happen just
once. If the url is alrady set in a handle, the loclize function
doesn't do anything. Caveat- nothing prevents the user from setting
the url field in the handle to undef. If this were to happen,
one could localize again.

METADATA

Not sure if these should be abstract or concrete. If concete
then we don not have to hand roll an implemetation for the four
different supported languages. The cost is an extra network
hop. For now, I choose the extra network hop over implementing
the same method by hand in for different languages. I belive it
to be a safe assumption that the metadata will not exceed several
megabytes in size.

To simplify the interface, we will require that the data be uploaded
prior to the loading of metadata. By simplify, I mean reducing 
the variable ways to use the interface to accomplish the same end
goal.

During implementation and testing, it becomes clear that keeping
the interface consistent requires a client implementation. Let
me explain. The upload and download methods take a file name.
If upload_metadata and download_metatdata are also to take a
filename, then it must be implemented on the client.

handle = upload(infile)
upload_metadata(handle, infile)
download(handle, outfile)
download_metadata(handle, outfile)

the alternative is

handle = upload(infile)
upload_metadata(handle, json_txt);
download(handle, outfile)
json_txt = download_metadata(handle)

I believe the first option is more consistent and easier to remember.
